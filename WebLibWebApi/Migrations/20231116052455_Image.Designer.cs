// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace WebLibWebApi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231116052455_Image")]
    partial class Image
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "USA",
                            FirstName = "John",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1975, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "UK",
                            FirstName = "Jane",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1992, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Canada",
                            FirstName = "David",
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1988, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Australia",
                            FirstName = "Emma",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1972, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Germany",
                            FirstName = "Michael",
                            LastName = "Davis"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1985, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "France",
                            FirstName = "Sophia",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1990, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Japan",
                            FirstName = "Daniel",
                            LastName = "Wilson"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1978, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Brazil",
                            FirstName = "Olivia",
                            LastName = "Moore"
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1983, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "South Africa",
                            FirstName = "Ethan",
                            LastName = "Lee"
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(1970, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Russia",
                            FirstName = "Ava",
                            LastName = "Anderson"
                        });
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultQuantity")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            DefaultQuantity = 0,
                            GenreId = 1,
                            Quantity = 10,
                            Title = "The Da Vinci Code",
                            Year = 2003
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            DefaultQuantity = 0,
                            GenreId = 2,
                            Quantity = 8,
                            Title = "Dune",
                            Year = 1965
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            DefaultQuantity = 0,
                            GenreId = 3,
                            Quantity = 15,
                            Title = "Pride and Prejudice",
                            Year = 1813
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            DefaultQuantity = 0,
                            GenreId = 4,
                            Quantity = 12,
                            Title = "The Girl with the Dragon Tattoo",
                            Year = 2005
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            DefaultQuantity = 0,
                            GenreId = 5,
                            Quantity = 20,
                            Title = "Harry Potter and the Sorcerer's Stone",
                            Year = 1997
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            DefaultQuantity = 0,
                            GenreId = 6,
                            Quantity = 18,
                            Title = "The Great Gatsby",
                            Year = 1925
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            DefaultQuantity = 0,
                            GenreId = 7,
                            Quantity = 9,
                            Title = "Steve Jobs",
                            Year = 2011
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            DefaultQuantity = 0,
                            GenreId = 8,
                            Quantity = 14,
                            Title = "The Hobbit",
                            Year = 1937
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 9,
                            DefaultQuantity = 0,
                            GenreId = 9,
                            Quantity = 11,
                            Title = "It",
                            Year = 1986
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 10,
                            DefaultQuantity = 0,
                            GenreId = 10,
                            Quantity = 16,
                            Title = "Romeo and Juliet",
                            Year = 1597
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 2,
                            DefaultQuantity = 0,
                            GenreId = 1,
                            Quantity = 7,
                            Title = "The Hound of the Baskervilles",
                            Year = 1902
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 2,
                            DefaultQuantity = 0,
                            GenreId = 2,
                            Quantity = 10,
                            Title = "Neuromancer",
                            Year = 1984
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 5,
                            DefaultQuantity = 0,
                            GenreId = 3,
                            Quantity = 13,
                            Title = "Sense and Sensibility",
                            Year = 1811
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 5,
                            DefaultQuantity = 0,
                            GenreId = 2,
                            Quantity = 15,
                            Title = "The Girl Who Played with Fire",
                            Year = 2006
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 5,
                            DefaultQuantity = 0,
                            GenreId = 2,
                            Quantity = 18,
                            Title = "Harry Potter and the Chamber of Secrets",
                            Year = 1998
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 6,
                            DefaultQuantity = 0,
                            GenreId = 6,
                            Quantity = 21,
                            Title = "To Kill a Mockingbird",
                            Year = 1960
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 7,
                            DefaultQuantity = 0,
                            GenreId = 7,
                            Quantity = 8,
                            Title = "Einstein: His Life and Universe",
                            Year = 2007
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 8,
                            DefaultQuantity = 0,
                            GenreId = 7,
                            Quantity = 12,
                            Title = "The Lord of the Rings",
                            Year = 1954
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 3,
                            DefaultQuantity = 0,
                            GenreId = 9,
                            Quantity = 14,
                            Title = "The Shining",
                            Year = 1977
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 10,
                            DefaultQuantity = 0,
                            GenreId = 10,
                            Quantity = 17,
                            Title = "Macbeth",
                            Year = 1606
                        });
                });

            modelBuilder.Entity("Entities.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("Entities.Models.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "555-1234",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7644)
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak St",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "555-5678",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7655)
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine St",
                            FirstName = "Robert",
                            LastName = "Johnson",
                            PhoneNumber = "555-9101",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7656)
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Elm St",
                            FirstName = "Emily",
                            LastName = "Williams",
                            PhoneNumber = "555-1212",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7657)
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Birch St",
                            FirstName = "Michael",
                            LastName = "Brown",
                            PhoneNumber = "555-1414",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7658)
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Maple St",
                            FirstName = "Olivia",
                            LastName = "Jones",
                            PhoneNumber = "555-1616",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7659)
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Cedar St",
                            FirstName = "William",
                            LastName = "Davis",
                            PhoneNumber = "555-1818",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7660)
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Redwood St",
                            FirstName = "Sophia",
                            LastName = "Miller",
                            PhoneNumber = "555-2020",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7661)
                        },
                        new
                        {
                            Id = 9,
                            Address = "606 Pine St",
                            FirstName = "James",
                            LastName = "Wilson",
                            PhoneNumber = "555-2222",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7663)
                        },
                        new
                        {
                            Id = 10,
                            Address = "707 Oak St",
                            FirstName = "Emma",
                            LastName = "Moore",
                            PhoneNumber = "555-2424",
                            RegistrationDate = new DateTime(2023, 11, 16, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7664)
                        });
                });

            modelBuilder.Entity("Entities.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CheckoutDate = new DateTime(2023, 11, 11, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7744),
                            ReaderId = 1,
                            TransactionStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            CheckoutDate = new DateTime(2023, 11, 6, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7747),
                            ReaderId = 2,
                            ReturnDate = new DateTime(2023, 11, 11, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7748),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            CheckoutDate = new DateTime(2023, 11, 8, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7752),
                            ReaderId = 3,
                            TransactionStatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 5,
                            CheckoutDate = new DateTime(2023, 11, 1, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7753),
                            ReaderId = 4,
                            TransactionStatusId = 3
                        },
                        new
                        {
                            Id = 5,
                            BookId = 4,
                            CheckoutDate = new DateTime(2023, 11, 9, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7754),
                            ReaderId = 5,
                            ReturnDate = new DateTime(2023, 11, 15, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7755),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookId = 6,
                            CheckoutDate = new DateTime(2023, 11, 4, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7757),
                            ReaderId = 6,
                            TransactionStatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            BookId = 8,
                            CheckoutDate = new DateTime(2023, 11, 7, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7758),
                            ReaderId = 7,
                            TransactionStatusId = 3
                        },
                        new
                        {
                            Id = 8,
                            BookId = 7,
                            CheckoutDate = new DateTime(2023, 11, 2, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7759),
                            ReaderId = 8,
                            ReturnDate = new DateTime(2023, 11, 8, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7759),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 9,
                            BookId = 10,
                            CheckoutDate = new DateTime(2023, 11, 5, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7760),
                            ReaderId = 9,
                            TransactionStatusId = 1
                        },
                        new
                        {
                            Id = 10,
                            BookId = 9,
                            CheckoutDate = new DateTime(2023, 11, 3, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7761),
                            ReaderId = 10,
                            TransactionStatusId = 3
                        },
                        new
                        {
                            Id = 11,
                            BookId = 7,
                            CheckoutDate = new DateTime(2023, 11, 10, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7762),
                            ReaderId = 1,
                            TransactionStatusId = 1
                        },
                        new
                        {
                            Id = 12,
                            BookId = 9,
                            CheckoutDate = new DateTime(2023, 11, 7, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7764),
                            ReaderId = 2,
                            TransactionStatusId = 3
                        },
                        new
                        {
                            Id = 13,
                            BookId = 8,
                            CheckoutDate = new DateTime(2023, 11, 9, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7765),
                            ReaderId = 3,
                            ReturnDate = new DateTime(2023, 11, 13, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7765),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 14,
                            BookId = 10,
                            CheckoutDate = new DateTime(2023, 11, 5, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7766),
                            ReaderId = 4,
                            ReturnDate = new DateTime(2023, 11, 10, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7767),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 15,
                            BookId = 6,
                            CheckoutDate = new DateTime(2023, 11, 8, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7768),
                            ReaderId = 5,
                            ReturnDate = new DateTime(2023, 11, 15, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7769),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 16,
                            BookId = 4,
                            CheckoutDate = new DateTime(2023, 11, 3, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7770),
                            ReaderId = 6,
                            ReturnDate = new DateTime(2023, 11, 9, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7770),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 17,
                            BookId = 5,
                            CheckoutDate = new DateTime(2023, 11, 6, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7772),
                            ReaderId = 7,
                            ReturnDate = new DateTime(2023, 11, 12, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7772),
                            TransactionStatusId = 3
                        },
                        new
                        {
                            Id = 18,
                            BookId = 3,
                            CheckoutDate = new DateTime(2023, 11, 4, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7773),
                            ReaderId = 8,
                            ReturnDate = new DateTime(2023, 11, 10, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7774),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 19,
                            BookId = 2,
                            CheckoutDate = new DateTime(2023, 11, 9, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7775),
                            ReaderId = 9,
                            ReturnDate = new DateTime(2023, 11, 14, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7776),
                            TransactionStatusId = 2
                        },
                        new
                        {
                            Id = 20,
                            BookId = 1,
                            CheckoutDate = new DateTime(2023, 11, 7, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7777),
                            ReaderId = 10,
                            ReturnDate = new DateTime(2023, 11, 13, 8, 24, 55, 61, DateTimeKind.Local).AddTicks(7777),
                            TransactionStatusId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "In use"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Returned"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lost"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Book", b =>
                {
                    b.HasOne("Entities.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Entities.Models.Transaction", b =>
                {
                    b.HasOne("Entities.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Reader", "Reader")
                        .WithMany("Transactions")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.TransactionStatus", "TransactionStatus")
                        .WithMany()
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Reader", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
